let a : String = "1"

fun function(){
  val c = 1.0
}

fun type(m: Int): Double {
  let a = 1 + 2 + 4
  return 0.0
}

let name = "name"
type(a = name = "hello")

let variable = 1.00
variable = variable + 1.201
val comp = 1 + 2 + 4 + 3 - 1 * 0.2

if(comp > 0){
  println("comparison result is true")
  println("comp => " ++ comp)
  println(variable)
}elif(comp == 0) {
  print("comparison result is false")
}else {
  println("comp is less than 0, it's " ++ comp)
}
let arr = [1, 2, 3]
val ar = [1 * 2 + 3 - (10 / 3 + 9 * 0.2), "arr"]
val a = [
  fun a() { return "in array function" } ,
  fun b() {
    return "fn=>b"
  }
]
val f = a(0)
println(f() ++ "??")
arr += 2
println(arr)
for i in range(10){
  println("range " ++ i)
}
let obj = {
  a: "string",
  b: "hello",
  c: a(0)
}
println(obj)
obj("java") = a(1)
obj("a") = a
println(obj)
println(obj("java"))

fn recursive(i: Int): Int {
  if(i > 10) { return i }
  return recursive(i + 1)
}
println( "recursive result is => " ++ recursive(0) )
